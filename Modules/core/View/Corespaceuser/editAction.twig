{% extends "Modules/layout.twig" %}
   
{% block content %}

<div class="row pm-table">
    <div id="formSection" data-origin="{{origin}}" data-options="{{options}}" data-forms="{{forms}}">
        <input
            v-for="item in sections"
            :id="item.btnId"
            type="button"
            :class="item.show ? 'btn btn-primary' : 'btn btn-secondary'"
            :value="item.displayName"
            style="margin:5px;"
            @click="showForm(item.module)">
        </input>
        <div id="sections" style="margin:5px;">
            <div :id="item.name + 'Section'" v-for="item in sections" v-show="item.show">
                <div name="formDiv" v-html="item.formHtml"></div>
                <div name="tableDiv" v-html="item.tableHtml"></div>
                <script v-if="item.module==='booking'" type="module">
                    import {DynamicForms} from '/externals/pfm/dynamics/dynamicForms.js';
                    let dynamicForms = new DynamicForms();
                    let spaceId = {{ id_space }};
                    let sourceId = "resource";
                    let targets = [
                        {
                            elementId: "visa_id",
                            apiRoute: `revisas/getcategoryvisas/`,
                            activateOnLoad: true
                        }
                    ];
                    dynamicForms.dynamicFields(sourceId, targets, spaceId);
                </script>
            </div>
        </div>
    </div>
</div>

<script>
    class Section {
        constructor(name, module, btnId, displayName, formHtml = null, tableHtml = null, show = false, subSection = null) {
            this.module = module;
            this.name = name;
            this.btnId = btnId;
            this.displayName = displayName;
            this.formHtml = formHtml;
            this.tableHtml = tableHtml;
            this.subSection = subSection;
            this.show = show;
        }
    }
    var app = new Vue({
        // delimiters: ['Âµ{', '}'],
        el: '#formSection',
        data () {
            return {
                origin: false,
                options: [],
                forms: [],
                sections: [],
                params: {
                    spaceId: {{ id_space }},
                    userId: {{ id_user }},
                },
            }
        },
        mounted: function() {
            this.origin = JSON.parse(this.$el.attributes['data-origin'].value);
            this.options = JSON.parse(this.$el.attributes['data-options'].value);
            this.forms = JSON.parse(this.$el.attributes['data-forms'].value);
            this.generateSections();
            this.showForm(this.getOriginPage());
        },
        methods: {
            showForm(itemModule) {
                let found = false;
                this.sections.forEach((section, index, array) => {
                    if (section.module === itemModule) {
                        section.show = true;
                        found = true;
                    } else {
                        if (section.subSection && section.subSection.module === itemModule) {
                            section.show = true;
                            section.subSection.show = !section.subSection.show;
                        } else {
                            section.show = false;
                            section.subSection ? section.subSection.show = false : null;
                        }
                    } 
                });   
            },
            getOriginPage() {
                let result = "spaceAccess";
                if (this.origin.page.match(/clientsuser/g)) {
                    result = "clientsUser";
                } else if (this.origin.page.match(/spaceaccess/g)) {
                    result = "spaceAccess";
                } else if (this.origin.page.match(/bookingaccess/g)) {
                    result = "bookingAccess";
                } else if (this.origin.page.match(/bkauthhistory/g)) {
                    result = "bkAuthHistory";
                }
                return result;
            },
            generateSections() {
                let spaceModuleName = "space";
                let spaceSection = new Section(
                    "spaceaccess",
                    spaceModuleName,
                    spaceModuleName + "Btn",
                    "Space access",
                    this.forms.spaceaccess
                );
                this.sections.push(spaceSection);
                this.options.forEach(option => {
                    let section = new Section(
                        option.toolname,
                        option.module,
                        option.module + "Btn",
                        option.toolname,
                        this.forms[option.toolname],
                        this.forms[option.toolname + "Table"]
                    );
                    this.sections.push(section);
                });
            }
        }
    });
</script>

{% endblock %}

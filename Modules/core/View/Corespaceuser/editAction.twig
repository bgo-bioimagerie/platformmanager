{% extends "Modules/layout.twig" %}
   
{% block content %}

<div class="row pm-table">
    <div id="formSection" data-origin="{{origin}}" data-options="{{options}}">
    {{ options }}
        <input
            v-for="(item, index) in sections"
            :id="item.btnId"
            type="button"
            :class="sections[item.name].show ? 'btn btn-primary' : 'btn btn-secondary'"
            :value="item.displayName"
            style="margin:5px;"
            @click="showForm(item.name)">
        </input>
        <div id="sections" style="margin:5px;">
            <div id="spaceAccessSection" v-show="sections.spaceAccess.show">
                {% autoescape false %}
                    {{ spaceAccessForm }}
                {% endautoescape %}
            </div>
            <div id="clientsUserSection" v-show="sections.clientsUser.show">
                {% autoescape false %}
                    {{ clientsUserTable }}
                    {{ clientsUserForm }}
                {% endautoescape %}
            </div>
            <div id="bookingAccessSection" v-show="sections.bookingAccess.show">
                {% autoescape false %}
                    {{ bkAuthTable }}
                    {{ bkAuthAddForm }}
                {% endautoescape %}
                <input
                    :id="sections.bookingAccess.subSection.btnId"
                    type="button"
                    :class="sections.bookingAccess.subSection.show ? 'btn btn-primary' : 'btn btn-secondary'"
                    :value="sections.bookingAccess.subSection.displayName"
                    style="margin:5px;"
                    @click="showForm(sections.bookingAccess.subSection.name)">
                </input>
                <div id="bkAuthHistorySection" v-show="sections.bookingAccess.subSection.show">
                {% autoescape false %}
                    {{ bkHistoryTable }}
                {% endautoescape %}
                </div>  
                <script type="module">
                    import {DynamicForms} from '/externals/pfm/dynamics/dynamicForms.js';
                    let dynamicForms = new DynamicForms();
                    let spaceId = {{ id_space }};
                    let sourceId = "resource";
                    let targets = [
                        {
                            elementId: "visa_id",
                            apiRoute: `revisas/getcategoryvisas/`,
                            activateOnLoad: true
                        }
                    ];
                    dynamicForms.dynamicFields(sourceId, targets, spaceId);
                </script>
            </div>
        </div>
    </div>
</div>

<script>
    var app = new Vue({
        el: '#formSection',
        data () {
            return {
                origin: false,
                options: false,
                params: {
                    spaceId: {{ id_space }},
                    userId: {{ id_user }},
                },
                sections: {
                    spaceAccess: {
                        name: "spaceAccess",
                        btnId: "spaceAccessBtn",
                        displayName: "Space access",
                        show: false
                    },
                    clientsUser: {
                        name: "clientsUser",
                        btnId: "clientsUserBtn",
                        displayName: "Clients accounts",
                        show: false
                    },
                    bookingAccess: {
                        name: "bookingAccess",
                        btnId: "bookingAccessBtn",
                        displayName: "Booking access",
                        show: false,
                        subSection: {
                            name: "bkAuthHistory",
                            btnId: "bkauthhistoryBtn",
                            displayName: "Booking authorisations history",
                            show: false
                        }
                    }
                }
            }
        },
        mounted: function() {
            this.origin = JSON.parse(this.$el.attributes['data-origin'].value);
            this.options = JSON.parse(this.$el.attributes['data-options'].value);
            this.updateSections();
            this.showForm(this.getOriginPage());
        },
        methods: {
            showForm(itemName) {
                let found = false;
                Object.getOwnPropertyNames(this.sections).forEach((sectionName, index, array) => {
                    let section = this.sections[sectionName];
                    if (sectionName === itemName) {
                        section.show = true;
                        found = true;
                    } else {
                        if (section.subSection && section.subSection.name === itemName) {
                            section.show = true;
                            section.subSection.show = !section.subSection.show;
                        } else {
                            section.show = false;
                            section.subSection ? section.subSection.show = false : null;
                        }
                    } 
                });                
            },
            getOriginPage() {
                let result = "spaceAccess";
                if (this.origin.page.match(/clientsuser/g)) {
                    result = "clientsUser";
                } else if (this.origin.page.match(/spaceaccess/g)) {
                    result = "spaceAccess";
                } else if (this.origin.page.match(/bookingaccess/g)) {
                    result = "bookingAccess";
                } else if (this.origin.page.match(/bkauthhistory/g)) {
                    result = "bkAuthHistory";
                }
                return result;
            },
            updateSections() {
                [...this.sections].filter(section => {
                    return section[index].name === "clientsUser";
                });
                console.log("filtered:", this.sections);
                this.options.forEach(option => {
                    console.log("option module:", option.module)
                });
                
            }
        }
    });
</script>

{% endblock %}

{% extends "Modules/layout.twig" %}
   
{% block content %}

<div class="row pm-table">
    {% autoescape false %}
        {# {{ formHtml }} #}
    {% endautoescape %}
    <div id="formSection" data-origin="{{origin}}">
        <button id="spaceAccess" type="button" v-on:click="getForm($event)">Space access</button>
        <button id="clientsAccounts" type="button" v-on:click="getForm($event)">Clients accounts</button>
        <button id="bookingAccess" type="button" v-on:click="getForm($event)">Booking access</button>
        <div id="formSection" v-show="show.form" v-html="forms.form"></div>
        <div id="tableSection" v-show="show.table" v-html="forms.table"></div>
    </div>
</div>


<script>
    var app = new Vue({
        el: '#formSection',
        data () {
            return {
                origin: false,
                show: {
                    clients: false,
                    spaceAccess: false,
                    bookingAccess: false,
                    form: false,
                    table: false
                },
                params: {
                    spaceId: {{ id_space }},
                    userId: {{ id_user }},
                },
                forms: {
                    spaceAccessForm: null,
                    clientAccountsForm: null,
                    clientAccountsTable: null,
                    bookingAccessForm: null,
                    form: null,
                    table: null
                }
            }
        },
        beforeMount: function() {
            console.log("before mount");
            console.log("el-attributes:", this.$el.attributes);
            this.origin = JSON.parse(this.$el.attributes['data-origin'].value);
            if (this.origin) {
                this.updateMenu();
            }
        },
        mounted: function() {
            console.log("mounted");
            if (!this.logged) {
                return
            }
        },
        methods: {
            showForm(formName) {
                switch (formName) {
                    case "spaceAccess":
                        this.show.spaceAccess = true;
                        this.show.clients = false;
                        this.show.bookingAccess = false;
                        break;
                    case "clientsAccounts":
                        this.show.spaceAccess = false;
                        this.show.clients = true;
                        this.show.bookingAccess = false;
                        break;
                    case "bookingAccess":
                        this.show.spaceAccess = false;
                        this.show.clients = false;
                        this.show.bookingAccess = true;
                        break;
                    default:
                        break;
                }
            },
            getOriginPage() {
                let result;
                if (this.origin.page.match(/clientsuseraccounts/g)) {
                    console.log("origin: clientsuseraccounts");
                    result = "clientsAccounts";
                } else if (this.origin.page.match(/spaceaccess/g)) {
                    console.log("origin: spaceaccess");
                    result = "spaceAccess";
                } else if (this.origin.page.match(/bookingaccess/g)) {
                    console.log("origin: bookingaccess");
                    result = "bookingAccounts";
                }
                return result;
            },
            updateMenu() {
                if (this.origin.page.match(/clientsuseraccounts/g)) {
                    this.getForm();
                    this.showForm("cliensAccounts");
                } else if (this.origin.page.match(/spaceaccess/g)) {
                    this.getForm();
                    this.showForm("spaceAccess");
                } else if (this.origin.page.match(/bookingaccess/g)) {
                    this.getForm();
                    this.showForm("bookingAccess"); 
                }
            },
            getForm(event = null) {
                let formName = (event && event.target) ? event.target.id : this.getOriginPage();
                const apiRoutes = {
                    "clientsAccounts": `clientsuseraccounts/getclientsuserform/`,
                    "spaceAccess": `corespaceaccess/useredit/`,
                    "bookingAccess": `bookingauthorisations/edit/`
                };
                const headers = new Headers();
                    headers.append('Content-Type','application/json');
                    headers.append('Accept', 'application/json');
                const cfg = {
                    headers: headers,
                    method: 'POST',
                    body: null
                };
                let apiRoute = apiRoutes[formName];
                let validationUrl = "coreaccessuseredit/" + this.params.spaceId + "/" + this.params.userId;
                cfg.body = JSON.stringify({
                    url: validationUrl
                });
                apiRoute += this.params.spaceId + "/";
                apiRoute += this.params.userId;
                fetch(apiRoute, cfg, true).
                then((response) => response.json(), (error) => {}).
                then(respData => {
                    console.log(respData);
                    this.forms.form = respData.formHtml;
                    this.show.form = true;
                    if (respData.tableHtml) {
                        this.forms.table = respData.tableHtml;
                        this.show.table = true;
                    } else {
                        this.show.table = false;
                    }
                }).catch((error) => {
                    console.debug('failed to get ' + formName + ' form', error);
                });
            }
        }
    })
</script>

{% endblock %}

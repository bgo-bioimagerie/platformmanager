{% extends "Modules/layout.twig" %}

{% block content %}

<div class="pm-table">
    
    <div class="col-12">
        
        {% if allPeriod == 1 %}
            <h3> GanttPeriod {# ServicesTranslator::GanttPeriod($lang) #} <h3/>
        {% else %}
             <h3> GanttOpened {# ServicesTranslator::GanttOpened($lang) #} <h3/>
        {% endif %}
        
    </div>
    
    <div class="col-12">
        <div class="text-center">
            <div class="btn-group btn-group-sm">

                {% set active = activeGantt == "" ? "active" : "" %}
                <button
                    class="btn btn-outline-dark {{ active }}"
                    onclick="location.href = 'servicesprojectgantt/{{id_space}}'">
                        All projects {# ServicesTranslator::All_projects($lang) #}
                    </button>
                
                {% for pic in personInCharge %}
                    {% set active = activeGantt == pic["id"] ? "active" : "" %}
                    <button
                        class="btn btn-outline-dark {{ active }}"
                        onclick="location.href = 'servicesprojectgantt/{{id_space}}/{{allPeriod}}/{{pic['id']}}'">
                            {{ pic["user_name"] }}
                    </button>                    
                {% endfor %}    

            </div>
        </div>
    </div>


    {% set inheritedTheme = context.theme %}

    <div id="gantt" class="container">

        <div id="contextmenu"
            class="card d-none d-md-flex mb-2"
            width="100%"
            height="28vh">

            <div id="dateInputs" class="row m-3">
                <div class="col-2">
                    <label for="start_date" class="top-label">Period start</label>
                    <input
                        id="start_date"
                        type="date"
                        :value="dateInputStart"
                        class="form-control"
                        name="start_date"
                        @change="updateChartDates">
                </div>
                <div class="col-2">
                    <label for="end_date" class="top-label">Period end</label>
                    <input
                        id="end_date"
                        type="date"
                        :value="dateInputEnd"
                        class="form-control"
                        name="end_date"
                        @change="updateChartDates">                 
                </div>
                <div class="col-2 mt-3" id="dateError" style="display:none">
                    <span style="color:red;"> Period start must be lower </br> than period end</span>
                </div>
            </div>

            <div class="row ms-3 mb-3">
                <div class="col-2">
                    <button id="showContextBtn" class="ml-2 btn btn-primary" @click="showAction">
                        Show options
                    </button>
                </div>
            </div>
            <div id="contextmenuHidable">
                <div class="row pa-2 m-3" v-if="showContextmenu">
                    <div class="col-3">
                        <input type="checkbox"
                            name="hideTimeaxis"
                            v-model="hideTimeaxis"/>
                        <label for="hideTimeaxis" class="side-label">Hide timeaxis</label>
                    </div>

                    <div class="col-3">
                        <input type="checkbox"
                            name="pushOnOverlap"
                            v-model="pushOnOverlap"/>
                        <label for="pushOnOverlap" class="side-label">Push on overlap</label>
                    </div>

                    <div class="col-3">
                        <input type="checkbox"
                            name="grid"
                            v-model="grid"/>
                        <label for="grid" class="side-label">Grid</label>
                    </div>

                    <div class="col-3">
                        <input type="checkbox"
                            name="highlightOnHover"
                            v-model="highlightOnHover"/>
                        <label for="highlightOnHover" class="side-label">Highlight on hover</label>
                    </div>

                </div>

                <div class="row pa-2 m-3" v-if="showContextmenu">
                    <div class="col-3">
                        <label for="theme" class="top-label">Theme</label>
                        <select v-model="selectedTheme" name="theme" @change="updateColors">
                            <option v-for="theme in themes">{{"{{theme}}"}}</option>
                        </select>
                    </div>

                    <div class="col-3 slidecontainer">
                        <label for="rowHeight" class="top-label">Row height</label>
                        <input
                            type="range"
                            class="slider"
                            name="rowHeight"
                            v-model="rowHeight"
                            :min="20"
                            :max="100">
                    </div>

                    <div class="col-3 slidecontainer">
                        <label for="rowLabelWidth" class="top-label">Row label width</label>
                        <input
                            type="range"
                            class="slider"
                            name="rowLabelWidth"
                            v-model="rowLabelWidth"
                            :min="10"
                            :max="50"
                            >
                    </div>

                    <div class="col-3" hidden>
                        <label for="highlightedHours" class="top-label">Highlighted hours</label>
                        <select 
                            v-model="highlightedHours"
                            name="highlightedHours"
                            multiple
                            style="width:inherit;">
                            <option v-for="hour in hours">{{"{{hour}}"}}</option>
                        </select>
                    </div>

                </div>
            </div>
        </div>

        <div id="taskContent" v-if="showModal">
            <div class="modal-dialog modal-mask" role="document">
                <div class="modal-content">

                    <div class="modal-header">
                        <h5 class="modal-title">{{"{{selectedTask.name}}"}}</h5>
                        <button type="button"
                            class="btn-close"
                            data-dismiss="modal"
                            @click="showModal = false"
                            aria-label="Close">
                        </button>
                    </div>

                    <div class="modal-body">
                        <div>
                            <label for="taskUser" style="font-weight:bold;">Affected to</label>
                            <div name="taskUser">
                                {{"{{selectedTask.userName}}"}}
                            </div>
                        </div>
                        <div>
                            <label for="taskServices" style="font-weight:bold;">Related services</label>
                            <div name="taskServices" v-for="service in selectedTask.services">
                                {{"{{service.name}}"}}
                            </div>
                        </div>
                        <div>            
                            <label for="taskContent" style="font-weight:bold;">Details</label>
                            <div name="taskContent">
                                {{"{{selectedTask.content}}"}}
                            </div>
                        </div>
                    </div>

                    <div class="modal-footer">
                        <button
                            type="button"
                            class="btn btn-secondary"
                            @click="gotoKanban">
                            View in kanban board
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div id="ganttChart">
            <g-gantt-chart
                :chart-start="chartStart"
                :chart-end="chartEnd"
                precision="month"
                width="100%"
                grid
                :color-scheme="selectedTheme"
                :row-height="40"
                bar-start="beginDate"
                bar-end="endDate"
                :date-format="format"
            >

                <g-gantt-row v-for="row in rowList"
                    :label="row.label"
                    :bars="row.barList"
                    highlight-on-hover
                />
                <template #bar-label="{bar}">
                    <img
                        v-if="bar.image"
                        :src="require(`@/assets/${bar.image}`)"
                        alt="image"
                        height="20"
                        width="20"
                        class="mr-1"
                    >
                    <!-- TODO: make span width variable depnending on image presence-->
                    <span v-if="itemsType=='project'" style="width:100%; text-align:center; cursor:pointer;" @click="openItemContent(bar.ganttBarConfig.itemId)">{{"{{bar.label}}"}}</span>
                    {# <span v-if="itemsType=='task'" data-toggle="popover" title="Popover Header" data-content="Some content inside the popover" style="width:100%; text-align:center;" @click="openItemContent(bar.ganttBarConfig.itemId)">{{"{{bar.label}}"}}</span> #}
                    <span v-if="itemsType=='task'" style="width:100%; text-align:center; cursor:pointer;" @click="openItemContent(bar.ganttBarConfig.itemId)">{{"{{bar.label}}"}}</span>
                    
                </template>
            </g-gantt-chart>
        </div>
    </div>

</div>

{# // TODO: use dayjs lib included in ganttastic bundle instead of moment.js #}
<script src="externals/node_modules/moment/min/moment.min.js"></script>
<script src="/externals/vue-ganttastic/dist/main.js"></script>
<script src="/externals/vue-ganttastic/colorThemes.js"></script>

<script>
let ref = pfmGant.vueRef();
const createApp = pfmGant.vueCreateApp();
const app = createApp({
    data() {
        return {
            chartStart: "01.06.2022 12:00",
            chartEnd: "15.10.2022 12:00",
            format: "DD.MM.YYYY HH:mm",
            dateInputFormat: "DD.MM.YYYY",

            dateInputStart: "01.06.2022",
            dateInputEnd: "15.10.2022",

            id_space: {{ id_space }},
            items: {{ projects | raw}},
            selectedTheme: "{{inheritedTheme}}" == "dark" ? "dark" : "default",
            itemsType: "project",
            showModal:false,
            showContextmenu: false,
            rowList: [],
            themes: Object.keys(colorThemes),
        }
    },
    created() {
        let dates = this.getDefaultDates();
        this.chartStart = moment(dates.start).format(this.format);
        this.chartEnd = moment(dates.end).format(this.format);
        this.dateInputStart = dates.start;
        this.dateInputEnd = dates.end;
        this.generateRows();
    },
    methods: {
        getDefaultDates() {
            let startDate = new Date();
            let endDate = new Date();
            endDate = endDate.setMonth(endDate.getMonth() + 1);
            return {
                start: startDate,
                end: endDate
            };
        },
        generateRows() {
            this.items.forEach((item, index) => {
                row = this.getRowFromItem(item, index);
                this.rowList.push(row);
            });
        },
        getRowFromItem(item, index) {
            let name = item.name // || item.title; => seems to work, but generates infinite loop
            let row = {
                id: 'item_' + item.id, // does that work ?
                label: name.length > 20 ? name.slice(0, 25) + "..." : name,
                barList: [],
            };

            let start = item.date_open || item.start_date;
            let end = item.time_limit || item.end_date;

            start = moment(start).format(this.format);
            end = moment(end).format(this.format);
            // make visible tasks that duration is less than or equal to 1 day
            /* if (end == start) {
                end = moment(end).add(1, "days").format(this.format)
            } */

            let itemData = {
                label: name,
                beginDate: start,
                endDate: end,
                ganttBarConfig: {
                    itemId: item.id,
                    background: "#e09b69",
                    borderRadius: "20px",
                    color: "black",
                }
            }

            row.barList.push(itemData);
            return row;
        },
        async openItemContent(itemId) {
            if (this.itemsType == "project") {
                this.itemsType = "task";
                this.projectId = itemId;
                let project = this.items.find(item => item.id == itemId);
                let tasks = await this.getProjectData('tasks', itemId);
                this.items = tasks;
                this.chartStart = moment(project.date_open).format(this.format);
                this.chartEnd = moment(project.time_limit).format(this.format);
                this.rowList = [];
                this.generateRows();
            } else if (this.itemsType == "task") {
                let services = await this.getProjectData('taskservices', itemId);
                this.openTaskPopup(itemId, services);
            } else {
                console.err("nothing to display");
            }
        },
        async getProjectData(elementCategory, elementId) {
            let result = [];
            const headers = new Headers();
            headers.append('Content-Type','application/json');
            headers.append('Accept', 'application/json');
            const cfg = {
                headers: headers,
                method: 'POST',
                body: null
            };
            let targetUrl = `/servicesprojects/get` + elementCategory + `/`;
            let apiRoute = targetUrl + this.id_space + "/" + elementId;
            await fetch(apiRoute, cfg, true).
                then((response) => response.json()).
                then(data => {
                    result = data.elements;
                });
                return result;
        },
        openTaskPopup(taskId, services) {
            let task = this.items.find(item => item.id == taskId);
            this.selectedTask = task;
            this.selectedTask.services = services;
            this.showModal = true;
        },
        gotoKanban() {
            if (this.projectId) {
                let kanbanUrl = "servicesprojects/kanban/" + this.id_space + "/" + this.projectId;
                window.location = kanbanUrl;
            } else {
                alert("there's no mathcing project");
            }
            
        },
        showAction() {
            document.getElementById("contextmenuHidable").classList.toggle("expanded");
            this.showContextmenu = !this.showContextmenu;
            event.target.innerHTML = this.showContextmenu
                ? "Hide options"
                : "Show options";
        },
        updateColors() {
            let theme = event ? event.target.value : this.selectedTheme;
            themeColors = colorThemes[theme];
            let bkSqr = document.getElementById('blankSquare');
            let contextMenu = document.getElementById("contextmenu");
            contextmenu.style["background-color"] = themeColors.ternary;
            [...contextMenu.getElementsByTagName("label")].forEach(label => {
                label.style["color"] = themeColors.text;
            });
            let monthHeaders = document.getElementsByClassName("monthHeader");
            [...monthHeaders].forEach((monthHeader, index) => {
                monthHeader.style["color"] = themeColors.text;
                monthHeader.style["background-color"] = 
                    index % 2 == 0
                    ? themeColors.secondary
                    : themeColors.primary;
            });
        },
        updateChartDates(event) {
            switch (event.target.name) {
                case "start_date":
                    this.dateInputStart = event.target.value;
                    this.chartStart = moment(event.target.value).format(this.format);
                    break;
                case "end_date":
                    this.dateInputEnd = event.target.value;
                    this.chartEnd = moment(event.target.value).format(this.format);
                    break;
                default:
                    break;
            }
            this.checkDates();
        },
        checkDates() {
            let errorElement = document.getElementById("dateError");
            if (this.dateInputStart > this.dateInputEnd) {
                errorElement.style.display = "";
            } else {
                errorElement.style.display = "none";
            }
        },
    }
  })

app.use(pfmGant.gant()).mount("#gantt")

</script>

<link href="externals/node_modules/@taitems/jquery-gantt/css/style.css" type="text/css" rel="stylesheet">
<style type="text/css">

    h1 {
        margin: 40px 0 20px 0;
    }
    h2 {
        font-size: 1.5em;
        padding-bottom: 3px;
        border-bottom: 1px solid #DDD;
        margin-top: 50px;
        margin-bottom: 25px;
    }
    table, th, td {
        text-align: center;
    }

    .fn-gantt .nav-link {
        padding: 0px;
    }
    .top-label {
        display:block;
        margin-bottom: 5px;
    }
    .side-label {
        margin-left: 5px;
    }

    .modal-dialog {
        position: absolute;
        z-index: 9;
        left: 50%;
        right: 50%;
        min-width: 300px;
    }

    #contextmenuHidable {
        max-height: 0px;
        overflow-y: hidden;
        transition: all 0.5s linear;
    }
    #contextmenuHidable.expanded {
        max-height: 1080px;
    }
    
</style>

{% endblock %}

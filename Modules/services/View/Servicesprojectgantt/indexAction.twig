{% extends "Modules/layout.twig" %}

{% block content %}

<div class="pm-table">
    
    <div class="col-12">
        
        {% if allPeriod == 1 %}
            <h3> GanttPeriod {# ServicesTranslator::GanttPeriod($lang) #} <h3/>
        {% else %}
             <h3> GanttOpened {# ServicesTranslator::GanttOpened($lang) #} <h3/>
        {% endif %}
        
    </div>
    
    <div class="col-12">
        <div class="text-center">
            <div class="btn-group btn-group-sm">

                {% set active = activeGantt == "" ? "active" : "" %}
                <button
                    class="btn btn-outline-dark {{ active }}"
                    onclick="location.href = 'servicesprojectgantt/{{id_space}}'">
                        All projects {# ServicesTranslator::All_projects($lang) #}
                    </button>
                
                {% for pic in personInCharge %}
                    {% set active = activeGantt == pic["id"] ? "active" : "" %}
                    <button
                        class="btn btn-outline-dark {{ active }}"
                        onclick="location.href = 'servicesprojectgantt/{{id_space}}/{{allPeriod}}/{{pic['id']}}'">
                            {{ pic["user_name"] }}
                    </button>                    
                {% endfor %}    

            </div>
        </div> 
    </div>

    <div id="gantt">
        

        <div id="contextmenu"
            class="card d-none d-md-flex"
            width="100%"
            height="28vh">

            <div id="dateInputs" class="row m-3">
                <div class="col-2">
                    <label for="start_date" class="top-label">Period start</label>
                    <input
                        id="start_date"
                        type="date"
                        :value="chartStart"
                        class="form-control"
                        name="start_date"
                        @change="updateChartDates">
                </div>
                <div class="col-2">
                    <label for="end_date" class="top-label">Period end</label>
                    <input
                        id="end_date"
                        type="date"
                        :value="chartEnd"
                        class="form-control"
                        name="end_date"
                        @change="updateChartDates">                 
                </div>
                <div class="col-2 mt-3" id="dateError" style="display:none">
                    <span style="color:red;"> Period start must be lower </br> than period end</span>
                </div>
            </div>

            <div class="row ms-3 mb-3">
                <div class="col-2">
                    <button id="showContextBtn" class="ml-2 btn btn-primary" @click="showAction">
                        Show options
                    </button>
                </div>
            </div>
            <div id="contextmenuHidable">
                <div class="row pa-2 m-3" v-if="showContextmenu">
                    <div class="col-3">
                        <input type="checkbox"
                            name="hideTimeaxis"
                            v-model="hideTimeaxis"/>
                        <label for="hideTimeaxis" class="side-label">Hide timeaxis</label>
                    </div>

                    <div class="col-3">
                        <input type="checkbox"
                            name="pushOnOverlap"
                            v-model="pushOnOverlap"/>
                        <label for="pushOnOverlap" class="side-label">Push on overlap</label>
                    </div>

                    <div class="col-3">
                        <input type="checkbox"
                            name="grid"
                            v-model="grid"/>
                        <label for="grid" class="side-label">Grid</label>
                    </div>

                    <div class="col-3">
                        <input type="checkbox"
                            name="highlightOnHover"
                            v-model="highlightOnHover"/>
                        <label for="highlightOnHover" class="side-label">Highlight on hover</label>
                    </div>

                </div>

                <div class="row pa-2 m-3" v-if="showContextmenu">
                    <div class="col-3">
                        <label for="theme" class="top-label">Theme</label>
                        <select v-model="selectedTheme" name="theme" @change="updateColors">
                            <option v-for="theme in themes">{{"{{theme}}"}}</option>
                        </select>
                    </div>

                    <div class="col-3 slidecontainer">
                        <label for="rowHeight" class="top-label">Row height</label>
                        <input
                            type="range"
                            class="slider"
                            name="rowHeight"
                            v-model="rowHeight"
                            :min="20"
                            :max="100">
                    </div>

                    <div class="col-3 slidecontainer">
                        <label for="rowLabelWidth" class="top-label">Row label width</label>
                        <input
                            type="range"
                            class="slider"
                            name="rowLabelWidth"
                            v-model="rowLabelWidth"
                            :min="10"
                            :max="50"
                            {# @change="updateBlankWidth" #}>
                    </div>

                    <div class="col-3" hidden>
                        <label for="highlightedHours" class="top-label">Highlighted hours</label>
                        <select 
                            v-model="highlightedHours"
                            name="highlightedHours"
                            multiple
                            style="width:inherit;">
                            <option v-for="hour in hours">{{"{{hour}}"}}</option>
                        </select>
                    </div>

                </div>
            </div>
        </div>

        <div id="ganttastic-wrapper">
            <div class="g-timeaxis-month mt-3 ml-5">
                <div id="blankSquare" style="width: 16%; float:left" class="p-2"></div>
                <table id="monthList" class="d-inline-flex" style="width: 84%;"></table>
            </div>
            <g-gantt-chart
                :chart-start="chartStart"
                :chart-end="chartEnd"
                :grid="grid"
                :hide-timeaxis="hideTimeaxis"
                :push-on-overlap="pushOnOverlap"
                :highlighted-hours="highlightedHours"
                :row-label-width="`${rowLabelWidth}%`"
                :row-height="rowHeight"
                :theme="selectedTheme"
                @contextmenu-bar="onContextmenuBar($event)"
                @dragend-bar="stoppedDraggingBar($event)"
            >
                <g-gantt-row 
                    v-for="row in rowList"
                    :key="row.title"
                    :label="row.label"
                    :bars="row.barList"
                    :highlight-on-hover="highlightOnHover"
                    bar-start="myStart"
                    bar-end="myEnd"
                >
                <template #bar-label="{bar}">
                    <img
                        v-if="bar.image"
                        :src="require(`@/assets/${bar.image}`)"
                        alt="image"
                        height="20"
                        width="20"
                        class="mr-1"
                    >
                    <span>{{bar.label}}</span>
                </template>
                </g-gantt-row>
            </g-gantt-chart>
        </div>

    </div>
</div>

<script src="externals/vueganttastic.js"></script>
<script src="externals/node_modules/moment/min/moment.min.js"></script>

<script>

THEMESCOLORS = {
    "default": {
        primary: "#eeeeee",
        secondary: "#E0E0E0",
        ternary: "#F5F5F5",
        hoverHighlight: "rgba(204, 216, 219, 0.5)",
        text: "#404040",
        background: "white"
    },
    "creamy": {
        primary: "#ffe8d9",
        secondary: "#fcdcc5",
        ternary: "#fff6f0",
        hoverHighlight: "rgba(230, 221, 202, 0.5)",
        text: "#542d05",
        background: "white"
    },
        "crimson": {
        primary: "#a82039",
        secondary: "#c41238",
        ternary: "#db4f56",
        hoverHighlight: "rgba(196, 141, 141, 0.5)",
        text: "white",
        background: "white"
    },
    "dark": {
        primary: "#404040",
        secondary: "#303030",
        ternary: "#353535",
        hoverHighlight: "rgba(159, 160, 161, 0.5)",
        text: "white",
        background: "#525252",
        toast: "#1f1f1f"
    },
    "flare": {
        primary: "#e08a38",
        secondary: "#e67912",
        ternary: "#5e5145",
        hoverHighlight: "rgba(196, 141, 141, 0.5)",
        text: "white",
        background: "white"
    },
    "fuchsia": {
        primary: "#de1d5a",
        secondary: "#b50b41",
        ternary: "#ff7da6",
        hoverHighlight: "rgba(196, 141, 141, 0.5)",
        text: "white",
        background: "white"
    },
    "grove": {
        primary: "#3d9960",
        secondary: "#288542",
        ternary: "#72b585",
        hoverHighlight: "rgba(160, 219, 171, 0.5)",
        text: "white",
        background: "white"
    },
    "material-blue": {
        primary: "#0D47A1",
        secondary: "#1565C0",
        ternary: "#42a5f5",
        hoverHighlight: "rgba(110, 165, 196, 0.5)",
        text: "white",
        background: "white"
    },
    "sky": {
        primary: "#b5e3ff",
        secondary: "#a1d6f7",
        ternary: "#d6f7ff",
        hoverHighlight: "rgba(193, 202, 214, 0.5)",
        text: "#022c47",
        background: "white"
    },
    "slumber": {
        primary: "#2c2e36",
        secondary: "#2f3447",
        ternary: "#35394d",
        hoverHighlight: "rgba(179, 162, 127, 0.5)",
        text: "#ffe0b3",
        background: "#38383b",
        toast: "#1f1f1f"
    },
    "vue": {
        primary: "#258a5d",
        secondary: "#41B883",
        ternary: "#35495E",
        hoverHighlight: "rgba(160, 219, 171, 0.5)",
        text: "white",
        background: "white"
    }
};

let app = new Vue({
    el: '#gantt',
    components:{
        'GGanttChart': ganttastic.GGanttChart,
        'GGanttRow': ganttastic.GGanttRow
    },
    data() {
        return {
            projects: {{ projects | raw}},
            chartStart: "",
            chartEnd: "",
            pushOnOverlap: true,
            grid: false,
            rowHeight: 40,
            rowLabelWidth: 16,
            hideTimeaxis: false,
            highlightOnHover: true,
            hours: [...Array(24).keys()],
            highlightedHours: [],
            showContextmenu: false,
            contextmenuTimeout: null,
            contextmenuX: 0,
            contextmenuY: 0,
            dateError: false,
            selectedTheme: "default",
            themes: [
                "default",
                "vue",
                "dark",
                "material-blue",
                "creamy",
                "slumber",
                "sky",
                "crimson",
                "grove",
                "fuchsia",
                "flare"
            ],
            rowList: []
        }
    },
    created() {
        let bkSqr = document.getElementById('blankSquare');
        bkSqr.style.width = this.rowLabelWidth;
        let dates = this.getDefaultDates();
        this.chartStart = dates.start;
        this.chartEnd = dates.end;
        this.generateRows();
        this.updateColors();        
        window.addEventListener("resize", this.adaptTimeaxis);
    },
    mounted() {
        this.adaptTimeaxis();
    },
    methods: {
        showAction() {
            document.getElementById("contextmenuHidable").classList.toggle("expanded");
            this.showContextmenu = !this.showContextmenu;
            event.target.innerHTML = this.showContextmenu
                ? "Hide options"
                : "Show options";
        },
        updateColors() {
            let theme = event ? event.target.value : "default";
            themeColors = THEMESCOLORS[theme];
            let contextMenu = document.getElementById("contextmenu");
            contextmenu.style["background-color"] = themeColors.ternary;
            [...contextMenu.getElementsByTagName("label")].forEach(label => {
                label.style["color"] = themeColors.text;
            });
            let monthHeaders = document.getElementsByClassName("monthHeader");
            [...monthHeaders].forEach((monthHeader, index) => {
                monthHeader.style["color"] = themeColors.text;
                monthHeader.style["background-color"] = index%2 == 0 ? themeColors.secondary : themeColors.primary;
            });
        },
        getDefaultDates() {
            let startDate = new Date();
            let endDate = new Date();
            endDate = endDate.setMonth(endDate.getMonth() + 1);
            return {start: moment(startDate).format('YYYY-MM-DD'), end: moment(endDate).format('YYYY-MM-DD')};
        },
        adaptTimeaxis() {
            let duration  = moment(this.chartEnd).diff(moment(this.chartStart), 'days') + 1;
            if (duration > 7 && document.getElementsByClassName("g-timeaxis-days")[0]) {
                this.displayTimeaxisInMonth(duration);
            }
        },
        displayTimeaxisInMonth(totalDays) {
            let timeaxisDaysSection = document.getElementsByClassName("g-timeaxis-days")[0];
            let monthList = this.getMonthInInterval(this.chartStart, this.chartEnd);
            let monthSection = document.getElementById("monthList");
            monthSection.innerHTML = "";

            let totalWidth = monthSection.offsetWidth;
            let totalRatio = 0;             
            monthList.forEach((month, index) => {
                let monthHeader = this.setMonthHeader(month, index, totalDays, totalWidth)
                monthSection.appendChild(monthHeader);
            });
        },
        setMonthHeader(month, index, totalDays, totalWidth) {
            nbMonthDays = moment(month.end).diff(moment(month.start), 'days') + 1;
            ratio = (nbMonthDays / totalDays);
            let monthName = moment(month.start).format('MMMM');
            let monthHeader = document.createElement("th");
            let width = ratio * totalWidth;
            monthHeader.innerHTML = width > 50 ? monthName : monthName.slice(0, 3);
            monthHeader.style['width'] = width + "px";
            monthHeader.style['word-wrap'] = "break-word";
            monthHeader.style["color"] = themeColors.text;
            monthHeader.style["background-color"] = index%2 == 0 ? themeColors.secondary : themeColors.primary;
            monthHeader.classList.add("monthHeader");
            return monthHeader;
        },
        getMonthInInterval(startDate, endDate) {
            let result = [];
            let format = 'YYYY-MM-DD';
            let start = moment(startDate, format);
            let end = moment(endDate, format);
            let endDateFormatted = end.format(format);
            let counter = 0;
            let monthStart;
            while(start.isBefore(end)) {
                monthStart = counter == 0 ? start.format(format) : start.startOf('month').format(format);
                result.push({
                    start: monthStart, 
                    end: start.endOf('month').format(format)
                });                
                start.add(1, 'month');
                counter++;
            }
            result.push({
                start: end.startOf('month').format(format),
                end: endDateFormatted
            })
            return result;
        },
        generateRows() {
            this.projects.forEach(project => {
                row = this.getRowFromProject(project);
                this.rowList.push(row);
            });
        },
        getRowFromProject(project) {
            let row = {
                label: "",
                barList: [],
            };
            let projectTimeSpan = {
                myStart: project.date_open,
                myEnd: project.time_limit
            }

            let name = project.name;
            row.label = name.length > 20 ? name.slice(0, 25) + "..." : name;
            row.barList.push(projectTimeSpan);
            return row;
        },
        updateChartDates(event) {
            switch (event.target.name) {
                case "start_date":
                    this.chartStart = event.target.value;
                    break;
                case "end_date":
                    this.chartEnd = event.target.value;
                    break;
                default:
                    break;
            }
            this.checkDates();
            this.adaptTimeaxis();
        },
        checkDates() {
            let errorElement = document.getElementById("dateError");
            if (this.chartStart > this.chartEnd) {
                errorElement.style.display = "";
                
            } else {
                errorElement.style.display = "none";
            }
        },
        stoppedDraggingBar() {
        },
        onContextmenuBar(e) {
            console.log("onContextmenuBar");
            e.event.preventDefault()
            this.contextmenuY = e.event.clientY
            this.contextmenuX = e.event.clientX
            this.showContextmenu = true
            if(this.contextmenuTimeout){
                clearTimeout(this.contextmenuTimeout)
            }
            this.contextmenuTimeout = setTimeout(() => this.showContextmenu = false, 3000)
        }
    }

});
    
</script>


<link href="externals/node_modules/@taitems/jquery-gantt/css/style.css" type="text/css" rel="stylesheet">
<style type="text/css">

    h1 {
        margin: 40px 0 20px 0;
    }
    h2 {
        font-size: 1.5em;
        padding-bottom: 3px;
        border-bottom: 1px solid #DDD;
        margin-top: 50px;
        margin-bottom: 25px;
    }
    table, th, td {
        /* border: 1px solid black; */
        text-align: center;
    }

    .fn-gantt .nav-link {
        padding: 0px;
    }
    .top-label {
        display:block;
        margin-bottom: 5px;
    }
    .side-label {
        margin-left: 5px;
    }

    #contextmenuHidable {
        max-height: 0px;
        overflow-y: hidden;
        transition: all 0.5s linear;
    }
    #contextmenuHidable.expanded {
        max-height: 1080px;
    }
    
</style>

{% endblock %}

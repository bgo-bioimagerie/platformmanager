{% extends "Modules/layout.twig" %}


{% block content %}
<div class="pm-form">

    <div class="col-12">
        <h3> {{ projectName }} </h3>
    </div>

    <div class="col-12">
        {% include 'Modules/services/View/Servicesprojects/projecttabs.twig' %}
    </div>

    <div id="board" class="container mt-5">
        {# <div class="row">
            <div class="col form-inline">
                <label for="newTask">{{"{{textContent.newTask}}"}}</label>
                <input id="newTask" name="newTask" type="text" v-model="newTask" aria-placeholder="Enter Task" @keyup.enter="addTask"/>
                <button class="ml-2 btn btn-primary" @click="addTask" style="margin:5px;"><strong>+</strong></button>
            </div>

            <div class="col form-inline">
                <label for="newCat">{{"{{textContent.newCategory}}"}}</label>
                <input id="newCat" name="newCat" type="text" v-model="newCategory" aria-placeholder="Enter Category" @keyup.enter="addCategory"/>
                <input id="newCatColor" type="color" v-model="newCategoryColor" aria-placeholder="Choose Color" style="vertical-align:middle; margin-bottom:5px" value="#000000"/>
                <button class="ml-2 btn btn-primary" @click="addCategory" style="margin:5px;"><strong style="font-size=30px">+</strong></button>
            </div>
        </div>

        <div class="row mt-3">
            <div id="taskContent" class="modal-element" v-if="showModal">
                <div class="modal-dialog modal-mask" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">{{"{{selectedTask.name}}"}}</h5>
                            <button type="button"
                                class="btn-close modal-element"
                                data-dismiss="modal"
                                @click="showModal = false"
                                aria-label="Close">
                            </button>
                        </div>
                        <div class="modal-body">
                            <label for="details" class="modal-element">Details</label>
                            <textarea id="taskDetails" class="contentArea modal-element" name="details" @change="updateTaskContent($event, selectedTask)">{{"{{selectedTask.content}}"}}</textarea>   
                        
                            <label for="taskUser" class="modal-element">Person in charge</label>
                            <select
                                id="taskUser"
                                :list="projectUsers"
                                class="form-control modal-element"
                                name="taskUser"
                                v-model="selectedTask.id_user"
                                @change="updateTaskUser($event, selectedTask)">
                                <option v-if="projectUsers.length == 0" value="" class="modal-element" disabled selected hidden>No users are affected to this project</option>
                                <option v-else v-for="user in projectUsers" :value=user.id class="modal-element">
                                    {{"{{user.name}}"}}
                                </option>
                            </select>
                                                    
                            <label for="services" class="modal-element">Services</label>
                            <select
                                id="taskServices"
                                :list="projectServices"
                                class="form-control modal-element"
                                name="services"
                                v-model="selectedTask.services"
                                multiple
                                @change="updateTaskServices($event, selectedTask)">
                                <option v-if="projectServices.length == 0" value="" class="modal-element" disabled selected hidden>No services are affected to this project</option>
                                <option v-else v-for="service in projectServices" :value=service.id class="modal-element">
                                    {{"{{service.name}}"}}
                                </option>
                            </select>
                        </div>

                        <div class="modal-footer">    
                            <div class="row form-control modal-element">
                                <label for="start_date" class="modal-element">Start date</label>
                                <input id="taskStartDate" type="date" class="form-control modal-element" name="start_date" :value="selectedTask.start_date" @change="updateTaskDate($event, selectedTask)">
                                <label for="end_date" class="modal-element">End date</label>
                                <input id="taskEndDate" type="date" class="form-control modal-element" name="end_date" :value="selectedTask.end_date" @change="updateTaskDate($event, selectedTask)">
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <draggable id="categories" class="kanban-categories" :list="categories" group="categories" @change="changeCategoryPosition">
                <div class="category col-md-3" v-for="(category, cindex) in categories" style="display:inline-flex">
                    <div :id=category.id class="p-2 alert" style="cursor:grab;">
                        <div class="bi bi-x-square-fill deleteBtn" @click="deleteCategory(category)"></div>
                        <h3>
                            {{"{{category.name}}"}}
                            <button class="bi bi-pencil-square round" @click="editCategory($event, category)"></button>
                        </h3>
                        <input hidden class="categoryColorInput" type="color" v-model="category.color" aria-placeholder="Choose Color" value="category.color" @change="editCategoryColor($event, category)"/>
                        
                        <draggable :id="category.id" class="list-group kanban-category" :list="category.tasks" group="tasks" @change="changeTaskState($event, cindex)">
                            <div class="list-group-item" style="cursor:grab;" v-for="element in category.tasks" :key="element.id">
                                {{"{{element.name}}"}}
                                <button class="bi bi-pencil-square round modal-element" @click="showTaskContent($event, element)"></button>
                                <div class="bi bi-trash deleteBtn" @click="deleteTask(element)"></div>
                            </div>
                        </draggable>

                    </div>
                </div>
            </draggable>
        </div> #}


        <div id="test">
            <button type="button" @click="logDraggable">draggable</button>
            <draggable class="dragArea list-group w-full" :list="list" @change="log">
            TEST
                <div
                    class="list-styles"
                    v-for="element in list"
                    :key="element.name"
                >
                    {{"{{ element.name }}"}}
                </div>
            </draggable>
        </div>

    </div>
</div>

{# <script src="externals/vuedraggableNext.js"></script> #}

<script type="module">
// TODO: replace by new draggable lib
import * as VueDraggableNext from '/externals/vuedraggableNext.js';
console.log(vueDraggableNext);

const vm = Vue.createApp({
  components: {
    draggable: VueDraggableNext,
  },
  data() {
    return {
      enabled: true,
      list: [
        { name: '', id: 1 },
        { name: '', id: 2 },
        { name: '', id: 3 },
      ],
      dragging: false,
    }
  },
  methods: {
    log(event) {
      console.log(event)
    },
    logDraggable() {
        console.log("draggable: ", VueDraggableNext)
    },
  },
}).mount('#test');

/* Vue.createApp({
    data () {
        return {
            newTask: "",
            newCategory: "",
            newCategoryColor: "#000000",
            id_space: {{ id_space }},
            id_project: {{ id_project }},
            tasks: {{ tasks | raw }},
            categories: {{ categories | raw }},
            projectServices: {{ projectServices | raw }},
            projectUsers: {{ projectUsers | raw }},
            textContent: {{ textContent | raw }},
            mainUser: {{ mainUser }},
            showModal: false,
            selectedTask: null
        }
    },
    components:{
        'draggable': vuedraggableNext
    },
    methods: {
        log(event) {
            console.log(event);
        },
    }
    created () {
        this.categories.forEach(category => {
            category.name = category.name.replace(/\s/g, '').toLowerCase();
        });
        this.tasks.forEach(task => {
            task.contentVisible = false;
            this.categories[task.state].tasks.push(task)
        });
    },
    mounted () {
        this.updateCategoriesColors();
    },
    updated() {
        this.updateCategoriesColors();
    },
    methods: {
        getMultipleSelectValues(select) {
            let result = [];
            const options = select && select.options;
            let opt;
            for (var i=0, iLen=options.length; i<iLen; i++) {
                opt = options[i];
                if (opt.selected) {
                    result.push(opt.value || opt.text);
                }
            }
            return result;
        },
        updateTaskServices(event, task) {            
            let selectedValues = this.getMultipleSelectValues(event.target);
            selectedValues.forEach(value => {
                task.services.push(value);
            });
            this.updateTask(task);
        },
        updateTaskUser(event, task) {
            task.user = event.target.value;            
            this.updateTask(task);
        },
        getTaskById(id) {
            this.tasks.forEach(task => {
                if (id == task.id) {
                    return task;
                }
            });
        },
        editCategory(event, category) {
            let categoryName = category.name
            let newName = prompt(this.textContent.renameCategory, categoryName);
            if (newName != null) {
                category.name = newName;
                category.name = category.name.replace(/\s/g, '').toLowerCase();
                let colorInput = document.getElementById(category.id).getElementsByClassName("categoryColorInput")[0];
                colorInput.click();
            }
            this.updateCategories();
        },

        editCategoryColor(event, category) {
            category.color = event.target.value;
            this.updateCategories();
        },
        updateCategoriesColors() {
            this.categories.forEach(category => {
                this.getRGBAColor(category);
            });
        },
        getRGBAColor(category, opacity=0.5) {
            let h = category.color.substring(1,7);
            let r = parseInt(h.substring(0,2),16);
            let g = parseInt(h.substring(2,4), 16);
            let b = parseInt(h.substring(4,6),16);
            let a  = opacity;
            let rgbaColor = "rgba(" + r +"," + g + "," + b + "," + a + ")";
            let categoryGroup = document.getElementById(category.id);
            categoryGroup.style.backgroundColor = rgbaColor;
        },
        showTaskContent(event, task) {
            this.selectedTask = task;
            this.showModal = true;
            document.addEventListener('click', this.closeTaskPopup);
        },
        closeTaskPopup(event) {
            let isModalElement = false;
            const classes = event.target.classList;
            // does classList contain a class with "modal-" ?
            classes.forEach(className => {
                if (className.includes('-') && className.split('-')[0] == "modal") {
                    isModalElement = true;
                }
            });
            if(!isModalElement) {
                this.showModal = false;
                document.removeEventListener('click', this.closeTaskPopup);
            }
        },
        changeTaskState(event, categoryIndex) {
            if (event.added) {
                let newState = categoryIndex;
                event.added.element.state = newState;
                event.added.element.contentVisible = false;

                let draggableElement = document.getElementById(this.categories[categoryIndex].id);
                this.updateHidables(draggableElement, event.added.element);
                this.updateTask(event.added.element);
            }
        },
        updateTaskDate(event, task) {
            switch (event.target.name) {
                case "start_date":
                    task.start_date = event.target.value;
                    this.updateTask(task);
                    break;
                case "end_date":
                    task.end_date = event.target.value;
                    this.updateTask(task);
                    break;
                default:
                    break;
            }
        },
        changeCategoryPosition(event) {
            if (event.moved) {
                event.moved.element.position = event.moved.newIndex;
                this.categories.forEach((category, index) => {
                    category.position = index;
                });
                this.updateCategories();
            }
        },
        updateHidables(parentElement, task) {
            let arrowClasses = task.contentVisible
                ? ['bi-arrow-down', 'bi-arrow-right']
                : ['bi-arrow-right', 'bi-arrow-down'];
            if (event.target && event.target.nodeName == "BUTTON") {
                event.target.classList.add(arrowClasses[0]);
                event.target.classList.remove(arrowClasses[1]);
            }
            let hidables = parentElement.getElementsByClassName("hidable");
            [...hidables].forEach(hidable => {
                if (task.contentVisible) {
                    hidable.style.display = "";
                    hidable.focus();
                } else {
                    hidable.style.display = "none";
                }
            });
        },
        updateTaskContent(event, task) {
            task.content = event.target.value;
            this.updateTask(task);
        },
        async addTask(task=null) {
            if(this.newTask) {
                this.newTask = {
                    id: 0,
                    id_space: this.id_space,
                    id_project: this.id_project,
                    state: 0,
                    name: this.newTask,
                    content: "",
                    contentVisible: false,
                    start_date: null,
                    end_date: null,
                    services: [],
                    id_user: this.mainUser
                };
                await this.updateTask(this.newTask);
                this.tasks.push(this.newTask);
                this.categories[0].tasks.push(this.newTask);
                this.newTask = "";
            }
        },
        async updateTask(task) {
            const headers = new Headers();
            headers.append('Content-Type','application/json');
            headers.append('Accept', 'application/json');
            const cfg = {
                headers: headers,
                method: 'POST',
                body: null
            };
            cfg.body = JSON.stringify({
                task: task
            });
            let targetUrl = `/servicesprojects/settask/`;
            let apiRoute = targetUrl + this.id_space + "/" + this.id_project;
            await fetch(apiRoute, cfg, true).
                then((response) => response.json()).
                then(data => {
                    task.id = data.id;
                });
        },
        async addCategory(category=null) {
            if(this.newCategory) {
                this.newCategory = {
                    id: 0,
                    id_space: this.id_space,
                    id_project: this.id_project,
                    position: this.categories.length,
                    name: this.newCategory,
                    color: this.newCategoryColor,
                    tasks: []
                };
                this.categories.push(this.newCategory);
                await this.updateCategories();
                this.newCategory = "";
            }
        },
        async updateCategories() {
            const headers = new Headers();
            headers.append('Content-Type','application/json');
            headers.append('Accept', 'application/json');
            const cfg = {
                headers: headers,
                method: 'POST',
                body: null
            };
            let targetUrl = `/servicesprojects/settaskcategory/`;
            let apiRoute = targetUrl + this.id_space + "/" + this.id_project;
            this.categories.forEach(async category => {
                cfg.body = JSON.stringify({
                    category: category
                });
                await fetch(apiRoute, cfg, true).
                    then((response) => response.json()).
                    then(data => {
                        category.id = data.id;
                });
            });
        },
        deleteTask(task, displayAlert=true) {
            if (!displayAlert || confirm(this.textContent.deleteTask + task.name)) {
                let tasks = this.categories[task.state].tasks;
                tasks.splice(tasks.indexOf(tasks.find(element => element.id == task.id)), 1);
                const headers = new Headers();
                headers.append('Content-Type','application/json');
                headers.append('Accept', 'application/json');
                const cfg = {
                    headers: headers,
                    method: 'POST',
                    body: null
                };
                cfg.body = JSON.stringify({
                    task: task
                });
                let targetUrl = `/servicesprojects/deletetask/`
                let apiRoute = targetUrl + this.id_space + "/" + task.id;
                fetch(apiRoute, cfg, true)
            }

        },
        deleteCategory(category) {
            if (confirm(category.name + ": " + this.textContent.deleteCategory )) {
                // remove tasks
                category.tasks.forEach(task => {
                    this.deleteTask(task, false);
                });
                // remove category
                this.categories.splice(this.categories.indexOf(this.categories.find(element => element.id == category.id)), 1);
                const headers = new Headers();
                headers.append('Content-Type','application/json');
                headers.append('Accept', 'application/json');
                const cfg = {
                    headers: headers,
                    method: 'POST',
                    body: null
                };
                cfg.body = JSON.stringify({
                    category: category
                });
                let targetUrl = `/servicesprojects/deletetaskcategory/`
                let apiRoute = targetUrl + this.id_space + "/" + category.id;
                fetch(apiRoute, cfg, true)
            }
        },
        getDate() {
            let today = new Date();
            let dd = String(today.getDate()).padStart(2, '0');
            let mm = String(today.getMonth() + 1).padStart(2, '0');
            let yyyy = today.getFullYear();
            return yyyy + '-' + mm + '-' + dd;
        },
    }
}).mount('#board'); */
</script>

<style>
    .kanban-category {
        min-height: 300px;
        min-width: 250px;
    } 
    .list-group-item {
        align-content: right;
    }
    .contentArea {
        /* min-height: 250px; */
        min-width: 350px;
    }
    .deleteBtn {
        display:inline;
        position: relative;
        float: right;
        background-color: transparent;
        color: red;
        cursor:pointer;
    }
    .round {
        background-color: transparent;        
        border-color: transparent;
        padding: 5px;
        text-decoration: none;
        display: inline-block;
        font-size: 12px;
        border-radius: 100%
    }
    .modal-dialog {
        position: absolute;
        z-index: 9;
        left: 50%;
        right: 50%;
        min-width: 400px;
    }

    label {
        display: block;
    }
    textarea {
        width: 100%;
        height: 150px;
        padding: 12px 20px;
        box-sizing: border-box;
        border: 2px solid #ccc;
        border-radius: 4px;
        background-color: #f8f8f8;
    }
</style>

{% endblock %}